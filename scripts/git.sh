#!/bin/bash

# 安装 husky 和 commitizen
echo "安装 husky 和 commitizen"
sleep 2
pnpm dlx husky-init && pnpm install
# 修改 husky 的 pre-commit 钩子
echo "修改 husky 的 pre-commit 钩子"
sleep 2
rm .husky/pre-commit
touch .husky/pre-commit
cat << 'EOF' >| .husky/pre-commit
#!/usr/bin/env sh
# shellcheck disable=SC1091
. "$(dirname -- "$0")/_/husky.sh"
echo "Running husky:pre-commit hook"
# 获取当前分支的名称，并将其存储在 branch 变量中,首次提交时没有分支，可以注释掉这一行
branch="$(git rev-parse --abbrev-ref HEAD)"
echo "当前分支: $branch"
# 检查是否存在提交历史
if [ "$(git rev-parse --verify HEAD 2>/dev/null)" = "" ]; then
echo "没有提交历史，跳过提交消息检查"
exit 0
fi
# 限制直接提交到主分支
# if [ "$branch" = "main" ]; then
# echo "您不能直接提交到主分支"
# exit 1
# fi

# 检查提交消息是否由 Commitizen 生成
commit_msg_file=$(git rev-parse --git-dir)/COMMIT_EDITMSG
echo "你可以在 $commit_msg_file 看到提交的信息记录"
# cat "$commit_msg_file"

# if ! grep -q 'Generated by Commitizen\|cz-customizable' "$commit_msg_file"; then
#   echo "请使用 git cz 进行提交，而不是直接使用 git commit"
#   exit 1
# else
#   echo "Commit message is valid."
# fi
EOF

echo "安装 commitizen 和 cz-customizable"
sleep 2
pnpm add commitizen cz-customizable  -D -w

echo "向 package.json 添加 commitizen 配置，如果提示是否覆写，请输入 yes"
sleep 2
jq '. + { config: { commitizen: { path: "node_modules/cz-customizable" }, "cz-customizable": { config: "cz-config.cjs" } } } | ( .devDependencies as $dev | del(.devDependencies) | . + { config: .config, devDependencies: $dev } )' package.json > temp.json && mv temp.json package.json

echo "创建 commitlint.config.js 文件，用于定义 git  commit 内容格式"
sleep 2
touch commitlint.config.js
cat << EOF >| commitlint.config.js
'use strict';

module.exports = {
  extends: ['cz'],
  rules: {
    'type-empty': [2, 'never'],
    'subject-empty': [2, 'never'],
  },
};
EOF

echo "创建 cz-config.cjs 文件，用于定义 git  commit 内容格式"
sleep 2
touch cz-config.cjs
cat << EOF >| cz-config.cjs
/**
 * @see  https://github.com/leoforfree/cz-
 * commitizen git commit 命令行工具 , 插件  cz-customizable 用于 定义 git  commit 内容格式
 */
module.exports = {
  types: [
    { value: 'wip', name: '🚧 wip: 工作进行中' },
    { value: 'feat', name: '✨ feat: 新增一个功能' },
    { value: 'fix', name: '🐞 fix: 修复一个Bug' },
    {
      value: 'style',
      name: '💅 style: 代码格式 （不影响功能，例如空格、分号等格式修正）',
    },
    { value: 'perf', name: '⏫ perf: 改善性能' },
    {
      value: 'build',
      name: '💪 build: 变更项目构建或外部依赖 （例如scopes: webpack、gulp、npm等）',
    },
    { value: 'refactor', name: '🛠  refactor: 代码重构' },
    {
      value: 'ci',
      name: '🎡 ci: 更改持续集成软件的配置文件和package中的scripts命令 例如scopes: Travis, Circle等',
    },
    { value: 'chore', name: '🗯  chore: 变更构建流程或辅助工具,往往是一些琐碎的更新' },
    { value: 'revert', name: '⏪ revert: 代码回退' },
    { value: 'docs', name: '📚 docs: 文档变更' },
    { value: 'test', name: '🏁 test: 测试' },
    { value: 'release', name: '🏹 release: 发版' },
  ],
  // 自定义范围
  scopes: [
    { name: 'repo' },
    { name: 'apps' },
    { name: 'packages' },
    { name: 'examples' },
    { name: 'docs' },
    { name: 'config' },
  ],
  // allowTicketNumber: false,
  isTicketNumberRequired: false,
  ticketNumberPrefix: 'TICKET-',
  ticketNumberRegExp: '\\d{1,5}',

  // override the messages, defaults are as follows
  messages: {
    type: '提交性质:',
    customScope: '表示此次更改的影响范围:',
    subject: '简要简述本次改动（必写）:\n',
    body: '提供更改的详细说明（可选）。使用"|"换行:\n',
    breaking: '列出重大更改（可选）:\n',
    footer: '列出此更改关闭的所有问题（可选）. E.g.: #31, #34:\n',
    confirmCommit: '确认上面的提交?',
  },

  // 设置只有 type 选择了 feat 或 fix，才询问 breaking message
  allowBreakingChanges: ['feat', 'fix'],

  // 跳过要询问的步骤
  skipQuestions: ['body'],

  // subject 限制长度
  subjectLimit: 100,
};
EOF

# git
git add .
git commit -m "chore: git-hooks and commitizen config"